FROM alpine:latest

WORKDIR /tmp

# Install git and rsync
RUN apk add --no-cache git rsync

# Using build args for credentials
ARG GIT_USERNAME
ARG GIT_PASSWORD
ARG GIT_FRONTEND_REPO_URL=https://github.com/traccar/traccar-web.git
ARG GIT_FRONTEND_BRANCH=""
ARG GIT_BACKEND_REPO_URL=https://github.com/traccar/traccar.git
ARG GIT_BACKEND_BRANCH=""

# Configure Git
RUN git config --global credential.helper store && \
    git config --global http.sslVerify false

# Clone frontend to temporary location
RUN if [ -n "$GIT_USERNAME" ] && [ -n "$GIT_PASSWORD" ]; then \
        echo "Cloning frontend with credentials"; \
        git clone --progress "https://$GIT_USERNAME:$GIT_PASSWORD@${GIT_FRONTEND_REPO_URL#https://}" /tmp/frontend-source; \
    else \
        echo "Cloning public frontend repo"; \
        git clone --progress "$GIT_FRONTEND_REPO_URL" /tmp/frontend-source; \
    fi && \
    if [ -n "$GIT_FRONTEND_BRANCH" ]; then \
        cd /tmp/frontend-source && git checkout $GIT_FRONTEND_BRANCH && git pull origin $GIT_FRONTEND_BRANCH; \
    fi

# Clone backend to temporary location
RUN if [ -n "$GIT_USERNAME" ] && [ -n "$GIT_PASSWORD" ]; then \
        echo "Cloning backend with credentials"; \
        git clone --progress "https://$GIT_USERNAME:$GIT_PASSWORD@${GIT_BACKEND_REPO_URL#https://}" /tmp/backend-source; \
    else \
        echo "Cloning public backend repo"; \
        git clone --progress "$GIT_BACKEND_REPO_URL" /tmp/backend-source; \
    fi && \
    if [ -n "$GIT_BACKEND_BRANCH" ]; then \
        cd /tmp/backend-source && git checkout $GIT_BACKEND_BRANCH && git pull origin $GIT_BACKEND_BRANCH; \
    fi

# Create entrypoint script
RUN cat > /entrypoint.sh << 'EOF'
#!/bin/sh
echo "🚀 Iniciando copia de código fuente..."

# Esperar un poco para que los volúmenes estén listos
sleep 2

# Actualizar frontend desde remoto si existe .git y rama definida
if [ -d "/tmp/frontend-source/.git" ] && [ -n "$GIT_FRONTEND_BRANCH" ]; then
    echo "🔄 Actualizando frontend desde remoto ($GIT_FRONTEND_BRANCH)..."
    cd /tmp/frontend-source && git checkout $GIT_FRONTEND_BRANCH && git pull origin $GIT_FRONTEND_BRANCH
    echo "🔍 Ejecutando npm run lint en frontend..."
    if npm run lint; then
        echo "✅ Lint exitoso, continuando..."
    else
        echo "❌ Error en lint de frontend. Deteniendo el proceso."
        exit 1
    fi
fi

# Actualizar backend desde remoto si existe .git y rama definida
if [ -d "/tmp/backend-source/.git" ] && [ -n "$GIT_BACKEND_BRANCH" ]; then
    echo "🔄 Actualizando backend desde remoto ($GIT_BACKEND_BRANCH)..."
    cd /tmp/backend-source && git checkout $GIT_BACKEND_BRANCH && git pull origin $GIT_BACKEND_BRANCH
fi

# Backup existing custom files if they exist
if [ -d "/app/traccar-backend" ] && [ -f "/app/traccar-backend/build.gradle" ]; then
    echo "📦 Backing up existing custom files..."
    mkdir -p /tmp/custom-backup
    
    # Backup key files that might have been customized
    [ -f "/app/traccar-backend/schema/changelog-master.xml" ] && cp "/app/traccar-backend/schema/changelog-master.xml" "/tmp/custom-backup/" 2>/dev/null
    [ -f "/app/traccar-backend/src/main/java/org/traccar/api/resource/DeviceResource.java" ] && mkdir -p "/tmp/custom-backup/src/main/java/org/traccar/api/resource/" && cp "/app/traccar-backend/src/main/java/org/traccar/api/resource/DeviceResource.java" "/tmp/custom-backup/src/main/java/org/traccar/api/resource/" 2>/dev/null
    [ -f "/app/traccar-backend/build.gradle" ] && cp "/app/traccar-backend/build.gradle" "/tmp/custom-backup/" 2>/dev/null
fi

# Copiar siempre el frontend actualizado, sobrescribiendo el destino
    echo "📥 Copiando código frontend actualizado..."
    rsync -av --delete /tmp/frontend-source/ /app/traccar-web/
    echo "✅ Frontend actualizado y copiado a /app/traccar-web/"
else
    echo "⚠️  Frontend ya existe en /app/traccar-web/ - conservando cambios locales"
fi

# Copiar siempre el backend actualizado, sobrescribiendo el destino
    echo "📥 Copiando código backend actualizado..."
    rsync -av --delete /tmp/backend-source/ /app/traccar-backend/
    echo "✅ Backend actualizado y copiado a /app/traccar-backend/"
else
    echo "⚠️  Backend ya existe en /app/traccar-backend/ - conservando cambios locales"
fi

# Restore custom files if they were backed up
if [ -d "/tmp/custom-backup" ]; then
    echo "🔄 Restaurando archivos personalizados..."
    
    [ -f "/tmp/custom-backup/changelog-master.xml" ] && cp "/tmp/custom-backup/changelog-master.xml" "/app/traccar-backend/schema/" 2>/dev/null
    [ -f "/tmp/custom-backup/src/main/java/org/traccar/api/resource/DeviceResource.java" ] && cp "/tmp/custom-backup/src/main/java/org/traccar/api/resource/DeviceResource.java" "/app/traccar-backend/src/main/java/org/traccar/api/resource/" 2>/dev/null
    [ -f "/tmp/custom-backup/build.gradle" ] && cp "/tmp/custom-backup/build.gradle" "/app/traccar-backend/" 2>/dev/null
    
    echo "✅ Archivos personalizados restaurados"
fi

echo "🎉 Código fuente listo para desarrollo!"
echo "📁 Archivos disponibles:"
echo "   - Frontend: /app/traccar-web/"
echo "   - Backend: /app/traccar-backend/"

# Mantener el contenedor vivo
sleep infinity
EOF

RUN chmod +x /entrypoint.sh

CMD ["/entrypoint.sh"]
